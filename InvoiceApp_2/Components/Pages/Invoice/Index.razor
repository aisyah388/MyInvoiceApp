@page "/invoice/list"
@using MyInvoiceApp_Shared.DTO

<MudText Typo="Typo.h4" Class="mb-4">Invoice List</MudText>

<MudTable Items="@invoicesList" Hover="true" Filterable="true" Sortable="true" Elevation="1" Bordered="true">
    <ToolBarContent>
        <MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddNewInvoice">
            Add New Invoice
        </MudButton>
        <MudSpacer />
    </ToolBarContent>

    <HeaderContent>
        <MudTh>No.</MudTh>
        <MudTh>Issue Date</MudTh>
        <MudTh>Client Name</MudTh>
        <MudTh>Due Date</MudTh>
        <MudTh>Total (RM)</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate Context="invoice">
        <MudTd>@invoice.Number</MudTd>
        <MudTd>@invoice.Issue_Date?.ToString("dd/MM/yyyy")</MudTd>
        <MudTd>@invoice.Client?.Company_Name</MudTd>
        <MudTd>@invoice.Due_Date?.ToString("dd/MM/yyyy")</MudTd>
        <MudTd>@invoice.Total.ToString("C")</MudTd>
        <MudTd>
            @if (invoice.Status != null)
            {
                <MudChip T="string" Color="@GetChipColor(invoice.Status?.Name)" Variant="Variant.Filled">
                    @invoice.Status.Name
                </MudChip>
            }
        </MudTd>
        <MudTd>
            <MudStack Row Spacing="1">
                <MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditInvoice(invoice.Id))">
                    Edit
                </MudButton>
                <MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => ConfirmDelete(invoice))">
                    Delete
                </MudButton>
            </MudStack>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<InvoiceDto> invoicesList = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            invoicesList = await Http.GetFromJsonAsync<List<InvoiceDto>>("api/invoice/all-invoices");
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to retrieve invoice list. Try again later.", Severity.Error);
        }
    }

    private void AddNewInvoice()
    {
        Navigation.NavigateTo("/invoice/add");
    }

    private void EditInvoice(Guid id)
    {
        Navigation.NavigateTo($"/invoice/edit/{id}");
    }

    private async Task ConfirmDelete(InvoiceDto invoice)
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Confirm Delete",
            markupMessage: (MarkupString)$"Are you sure you want to delete <b>{invoice.Number}</b>?",
            yesText: "Delete",
            noText: "Cancel",
            options: new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true }
        );

        if (result == true)
        {
            await DeleteInvoice(invoice.Id);
        }
    }

    private async Task DeleteInvoice(Guid id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/invoice/{id}");

            if (response.IsSuccessStatusCode)
            {
                invoicesList = await Http.GetFromJsonAsync<List<InvoiceDto>>("api/invoice/all-invoices");
                Snackbar.Add("Invoice deleted successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to delete invoice.", Severity.Error);
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Error occurred while deleting the invoice.", Severity.Error);
        }
    }

    private Color GetChipColor(string status)
    {
        return status.ToLower() switch
        {
            "paid" => Color.Success,
            "unpaid" => Color.Error,
            "pending" => Color.Warning,
            "overdue" => Color.Secondary,
            "partial" => Color.Info,
            _ => Color.Dark
        };
    }
}
